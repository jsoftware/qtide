name: JQtide

on:
 push:
  branches:
   - master
   - main

permissions: write-all

jobs:
 jqtide:
  name: JQtide
  runs-on: ${{ matrix.os }}

  strategy:
   matrix:
    include:
      - os: ubuntu-latest
        version: 5.15.2
#      - os: ubuntu-20.04
#        version: 5.12.8
#      - os: ubuntu-22.04
#        version: 5.15.2
#      - os: macos-11
#        version: 6.2.4
#        modules: 'qtwebengine qt5compat qtwebsockets qtmultimedia qtwebchannel qtpositioning'
#      - os: windows-2019
#        version: 6.2.4
#        modules: 'qtwebengine qt5compat qtwebsockets qtmultimedia qtwebchannel qtpositioning'

  steps:
   - name: Check Git repository
     uses: actions/checkout@v2
     with:
      submodules: recursive

   - name: Install Qt Linux
     if: matrix.os == 'ubuntu-20.04'
     run: script/installqt.sh linux

   - name: Install Qt, Compile JQtide Raspberry
     if: matrix.os == 'ubuntu-22.04'
     uses: pguyot/arm-runner-action@v2
     with:
      cpu: cortex-a53
      cpu_info: cpuinfo/raspberrypi_zero2_w_arm64
      base_image: raspios_lite_arm64:latest
      image_additional_mb: 1024
      copy_artifact_path: output
      commands: |
       export CC=gcc
       export USE_SLEEF=1
       script/installqt.sh raspberry
       script/makelinux.sh ${{ matrix.version }} raspberry
       find output -type d -exec chmod a+rwx {} \;
       find output -type f -exec chmod a+rw {} \;

   - name: Install Qt, Compile JQtide Raspberry32
     if: matrix.os == 'ubuntu-latest'
     uses: pguyot/arm-runner-action@v2
     with:
      cpu: arm1176
      cpu_info: cpuinfo/raspberrypi_zero2_w
      base_image: raspbian_lite:2020-02-13
      image_additional_mb: 1024
      copy_artifact_path: output
      commands: |
       apt-cache search qt4

#       export CC=gcc
#       export USE_SLEEF=0
#       script/installqt.sh raspberry32
#       script/makelinux.sh ${{ matrix.version }} raspberry32
#       find output -type d -exec chmod a+rwx {} \;
#       find output -type f -exec chmod a+rw {} \;

   - name: Transfer JQtide (Raspberry)
     if: matrix.os == 'ubuntu-22.04'
     run: |
      mv output/* .

   - name: Transfer JQtide (Raspberry32)
     if: matrix.os == 'ubuntu-latest'
     run: |
      mv output/* .

   - name: Install Qt not Linux
     if: runner.os != 'Linux'
     uses: jurplel/install-qt-action@v2
     with:
      version: ${{ matrix.version }}
      target: 'desktop'
      dir: '${{github.workspace}}/qt/'
      modules: ${{ matrix.modules }}
      aqtversion: '==2.1.0'

   - name: Compile JQtide (Linux)
     if: matrix.os == 'ubuntu-20.04'
     run: script/makelinux.sh ${{ matrix.version }} linux

   - name: Compile JQtide (macOS)
     if: runner.os == 'macOS'
     env:
      CC: clang
      USE_SLEEF: 1
     run: script/makemac.sh ${{ matrix.version }}

   - name: Compile JQtide (Windows)
     if: runner.os == 'Windows'
     shell: cmd
     run: script\makewin.cmd ${{ matrix.version }}

   - name: Release JQtide (Linux)
     if: matrix.os == 'ubuntu-20.04'
     uses: ncipollo/release-action@v1
     with:
       tag: build
       artifacts: "jqt-linux.tar.gz,jqt-linux-slim.tar.gz"
       token: ${{ secrets.GITHUB_TOKEN }}
       allowUpdates: true

   - name: Release JQtide (Raspberry)
     if: matrix.os == 'ubuntu-22.04'
     uses: ncipollo/release-action@v1
     with:
       tag: build
       artifacts: "jqt-raspberry.tar.gz,jqt-raspberry-slim.tar.gz"
       token: ${{ secrets.GITHUB_TOKEN }}
       allowUpdates: true

   - name: Release JQtide (Raspberry32)
     if: matrix.os == 'ubuntu-latest'
     uses: ncipollo/release-action@v1
     with:
       tag: build
       artifacts: "jqt-raspberry32.tar.gz,jqt-raspberry32-slim.tar.gz"
       token: ${{ secrets.GITHUB_TOKEN }}
       allowUpdates: true

   - name: Release JQtide (macOS)
     if: runner.os == 'macOS'
     uses: ncipollo/release-action@v1
     with:
       tag: build
       artifacts: "jqt-mac.zip,jqt-mac-slim.zip"
       token: ${{ secrets.GITHUB_TOKEN }}
       allowUpdates: true

   - name: Release JQtide (Windows)
     if: runner.os == 'Windows'
     uses: ncipollo/release-action@v1
     with:
       tag: build
       artifacts: "jqt-win.zip,jqt-win-slim.zip"
       token: ${{ secrets.GITHUB_TOKEN }}
       allowUpdates: true

 webhook:
  name: Run Webhook
  runs-on: ubuntu-20.04
  needs: jqtide
  steps:
   - name: update server
     uses: distributhor/workflow-webhook@v2
     env:
      webhook_url: ${{ secrets.WEBHOOK_URL }}
      webhook_secret: ${{ secrets.WEBHOOK_SECRET }}
      data: '{ "id": "jqtbuild" }'
